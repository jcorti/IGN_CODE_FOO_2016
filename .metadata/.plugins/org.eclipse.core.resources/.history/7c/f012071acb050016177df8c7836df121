package com.ign.corti;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class Game extends JFrame implements ActionListener {

    public Player player = new Player("player");
    public Player dealer = new Player("dealer");

    private Deck fullDeck;
    
    private JButton btnHit = new JButton("Hit");
    private JButton btnStay = new JButton("Stay");
    private JButton btnDeal = new JButton("Deal");

    private JLabel lblStatus = new JLabel(" ", JLabel.CENTER);
    private JLabel lblScore = new JLabel("Player Score: ", JLabel.CENTER);

    JPanel playerPanel = new JPanel();
    JPanel dealerPanel = new JPanel();
    JPanel buttonsPanel = new JPanel();
    JPanel statusPanel = new JPanel();

    Game() {
        JFrame gameFrame = new JFrame("IGN Code FOO - BlackJack");
        gameFrame.setIconImage(Toolkit.getDefaultToolkit().getImage("cards/10.png"));
        gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        buttonsPanel.add(btnHit);
        buttonsPanel.add(btnStay);
        buttonsPanel.add(btnDeal);
        statusPanel.add(lblStatus);
        statusPanel.add(lblScore);
        
        btnHit.addActionListener(this);
        btnStay.addActionListener(this);
        btnDeal.addActionListener(this);

        btnHit.setEnabled(false);
        btnStay.setEnabled(false);

        dealerPanel.setBackground(Color.CYAN);
        playerPanel.setBackground(Color.CYAN);
        buttonsPanel.setBackground(Color.LIGHT_GRAY);
        statusPanel.setBackground(Color.CYAN);

        gameFrame.setLayout(new BorderLayout());
        gameFrame.add(dealerPanel, BorderLayout.NORTH);
        gameFrame.add(playerPanel, BorderLayout.CENTER);
        gameFrame.add(buttonsPanel, BorderLayout.SOUTH);
        gameFrame.add(statusPanel, BorderLayout.WEST);
        gameFrame.repaint();
        gameFrame.setResizable(false);
        gameFrame.setSize(500, 350);
        gameFrame.setVisible(true);
    }

    private void hitPlayer() {
        Card newCard = player.dealTo(Deck.dealFrom());
        playerPanel.add(new JLabel(new ImageIcon("cards/" + newCard.toString())));
        playerPanel.updateUI();
    }

    private void hitDealerDown() {
        Card newCard = dealer.dealTo(deck.dealFrom());
        dealerPanel.add(new JLabel(new ImageIcon("cards/b2fv.png")));
        dealerPanel.updateUI();
    }

    private void hitDealer() {
        Card newCard = dealer.dealTo(deck.dealFrom());
        dealerPanel.add(new JLabel(new ImageIcon("cards/" + newCard.toString())));
        dealerPanel.updateUI();
    }

    private void deal() {
        playerPanel.removeAll();
        dealerPanel.removeAll();
        playerPanel.updateUI();
        dealerPanel.updateUI();
        player.reset();
        dealer.reset();
        if (fullDeck == null || deck.size() < 15) {
        	fullDeck = new Deck();
        	fullDeck.shuffle();
            lblStatus.setText("Shuffling");
        }
        hitPlayer();
        hitDealerDown();
        hitPlayer();
        hitDealer();
    }

    private void checkWinner() {
        dealerPanel.removeAll();
        for (int i = 0; i < dealer.inHand(); i++) {
            dealerPanel.add(new JLabel(new ImageIcon("cards/" + dealer.cards[i].toString())));
        }
        if (player.value() > 21) {
            jlblStatus.setText("Player Busts");
        } else if (dealer.value() > 21) {
            jlblStatus.setText("Dealer Busts");
        } else if (dealer.value() == player.value()) {
            jlblStatus.setText("Push");
        } else if (dealer.value() < player.value()) {
            jlblStatus.setText("Player Wins");
        } else {
            jlblStatus.setText("Dealer Wins");
        }
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == jbtnHit) {
            hitPlayer();
            if (player.value() > 21) {
                checkWinner();
                jbtnHit.setEnabled(false);
                jbtnStay.setEnabled(false);
                jbtnDeal.setEnabled(true);
            }
        }

        if (e.getSource() == jbtnStay) {
            while (dealer.value() < 17 || player.value() > dealer.value()) {
                hitDealer();
            }
            checkWinner();
            jbtnHit.setEnabled(false);
            jbtnStay.setEnabled(false);
            jbtnDeal.setEnabled(true);
        }

        if (e.getSource() == jbtnDeal) {
            deal();
            jlblStatus.setText(" ");
            jbtnHit.setEnabled(true);
            jbtnStay.setEnabled(true);
            jbtnDeal.setEnabled(false);
        }
    }

    public static void main(String[] args) {
        new Game();
    }
}
