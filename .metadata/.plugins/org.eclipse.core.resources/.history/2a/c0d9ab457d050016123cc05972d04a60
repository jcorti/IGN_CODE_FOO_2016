package com.ign.corti;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashMap;

public class KeybordSetup implements KeyListener{

	
	private boolean[] keys = new boolean[120];
	public boolean up, down, left, right; 
	
	private HashMap<Integer, Character> keyMap;
	
	public 
	
	public void update()
	{
		
		up = keys[KeyEvent.VK_UP] || keys[KeyEvent.VK_W];
		down = keys[KeyEvent.VK_DOWN] || keys[KeyEvent.VK_S];
		left = keys[KeyEvent.VK_LEFT] || keys[KeyEvent.VK_A];
		right = keys[KeyEvent.VK_RIGHT] || keys[KeyEvent.VK_D];
		
		 
	}
	public void keyPressed(KeyEvent e) 
	{
 	keys[e.getKeyCode()] = true;
	}

 	public void keyReleased(KeyEvent e) 
 	{
 	 	keys[e.getKeyCode()] = false; 		
	}

 	public void keyTyped(KeyEvent e) 
 	{
 		
	}

}
/**
// Goes row by row on keyboard

// without shift
// row 1
translationMap.put(EVK_SUP2, '`');
translationMap.put(KeyEvent.VK_AMPERSAND, '1');
translationMap.put(EVK_EACCENT, '2');
translationMap.put(KeyEvent.VK_QUOTEDBL, '3');
translationMap.put(KeyEvent.VK_QUOTE, '4');
translationMap.put(KeyEvent.VK_LEFT_PARENTHESIS, '5');
translationMap.put(KeyEvent.VK_MINUS, '6');
translationMap.put(EVK_EBACKTICK, '7');
translationMap.put(KeyEvent.VK_UNDERSCORE, '8');
translationMap.put(EVK_CCEDILLA, '9');
translationMap.put(EVK_ABACKTICK, '0');
translationMap.put(KeyEvent.VK_RIGHT_PARENTHESIS, '-');
translationMap.put(KeyEvent.VK_EQUALS, '=');

// row 2
translationMap.put(KeyEvent.VK_A, 'q');
translationMap.put(KeyEvent.VK_Z, 'w');
translationMap.put(KeyEvent.VK_E, 'e');
translationMap.put(KeyEvent.VK_R, 'r');
translationMap.put(KeyEvent.VK_T, 't');
translationMap.put(KeyEvent.VK_Y, 'y');
translationMap.put(KeyEvent.VK_U, 'u');
translationMap.put(KeyEvent.VK_I, 'i');
translationMap.put(KeyEvent.VK_O, 'o');
translationMap.put(KeyEvent.VK_P, 'p');
translationMap.put(KeyEvent.VK_DEAD_CIRCUMFLEX, '[');
translationMap.put(KeyEvent.VK_DOLLAR, ']');

// row 3
translationMap.put(KeyEvent.VK_Q, 'a');
translationMap.put(KeyEvent.VK_S, 's');
translationMap.put(KeyEvent.VK_D, 'd');
translationMap.put(KeyEvent.VK_F, 'f');
translationMap.put(KeyEvent.VK_G, 'g');
translationMap.put(KeyEvent.VK_H, 'h');
translationMap.put(KeyEvent.VK_J, 'j');
translationMap.put(KeyEvent.VK_K, 'k');
translationMap.put(KeyEvent.VK_L, 'l');
translationMap.put(KeyEvent.VK_M, ';');
translationMap.put(EVK_UACCENT, '\'');
translationMap.put(KeyEvent.VK_ASTERISK, '\\');

// row 4
translationMap.put(KeyEvent.VK_W, 'z');
translationMap.put(KeyEvent.VK_X, 'x');
translationMap.put(KeyEvent.VK_C, 'c');
translationMap.put(KeyEvent.VK_V, 'v');
translationMap.put(KeyEvent.VK_B, 'b');
translationMap.put(KeyEvent.VK_N, 'n');
translationMap.put(KeyEvent.VK_COMMA, 'm');
translationMap.put(KeyEvent.VK_SEMICOLON, ',');
translationMap.put(KeyEvent.VK_COLON, '.');
translationMap.put(KeyEvent.VK_EXCLAMATION_MARK, '/');

// space bar
translationMap.put(KeyEvent.VK_SPACE, ' ');

// with shift
// row 1
translationMapShift.put(EVK_SUP2, '~');
translationMapShift.put(KeyEvent.VK_AMPERSAND, '!');
translationMapShift.put(EVK_EACCENT, '@');
translationMapShift.put(KeyEvent.VK_QUOTEDBL, '#');
translationMapShift.put(KeyEvent.VK_QUOTE, '$');
translationMapShift.put(KeyEvent.VK_LEFT_PARENTHESIS, '%');
translationMapShift.put(KeyEvent.VK_MINUS, '^');
translationMapShift.put(EVK_EBACKTICK, '&');
translationMapShift.put(KeyEvent.VK_UNDERSCORE, '*');
translationMapShift.put(EVK_CCEDILLA, '(');
translationMapShift.put(EVK_ABACKTICK, ')');
translationMapShift.put(KeyEvent.VK_RIGHT_PARENTHESIS, '_');
translationMapShift.put(KeyEvent.VK_EQUALS, '+');

// row 2
translationMapShift.put(KeyEvent.VK_A, 'Q');
translationMapShift.put(KeyEvent.VK_Z, 'W');
translationMapShift.put(KeyEvent.VK_E, 'E');
translationMapShift.put(KeyEvent.VK_R, 'R');
translationMapShift.put(KeyEvent.VK_T, 'T');
translationMapShift.put(KeyEvent.VK_Y, 'Y');
translationMapShift.put(KeyEvent.VK_U, 'U');
translationMapShift.put(KeyEvent.VK_I, 'I');
translationMapShift.put(KeyEvent.VK_O, 'O');
translationMapShift.put(KeyEvent.VK_P, 'P');
translationMapShift.put(KeyEvent.VK_DEAD_CIRCUMFLEX, '{');
translationMapShift.put(KeyEvent.VK_DOLLAR, '}');

// row 3
translationMapShift.put(KeyEvent.VK_Q, 'A');
translationMapShift.put(KeyEvent.VK_S, 'S');
translationMapShift.put(KeyEvent.VK_D, 'D');
translationMapShift.put(KeyEvent.VK_F, 'F');
translationMapShift.put(KeyEvent.VK_G, 'G');
translationMapShift.put(KeyEvent.VK_H, 'H');
translationMapShift.put(KeyEvent.VK_J, 'J');
translationMapShift.put(KeyEvent.VK_K, 'K');
translationMapShift.put(KeyEvent.VK_L, 'L');
translationMapShift.put(KeyEvent.VK_M, ':');
translationMapShift.put(EVK_UACCENT, '"');
translationMapShift.put(KeyEvent.VK_ASTERISK, '|');

// row 4
translationMapShift.put(KeyEvent.VK_W, 'Z');
translationMapShift.put(KeyEvent.VK_X, 'X');
translationMapShift.put(KeyEvent.VK_C, 'C');
translationMapShift.put(KeyEvent.VK_V, 'V');
translationMapShift.put(KeyEvent.VK_B, 'B');
translationMapShift.put(KeyEvent.VK_N, 'N');
translationMapShift.put(KeyEvent.VK_COMMA, 'M');
translationMapShift.put(KeyEvent.VK_SEMICOLON, '<');
translationMapShift.put(KeyEvent.VK_COLON, '>');
translationMapShift.put(KeyEvent.VK_EXCLAMATION_MARK, '?');

// space bar
translationMapShift.put(KeyEvent.VK_SPACE, ' ');
**/