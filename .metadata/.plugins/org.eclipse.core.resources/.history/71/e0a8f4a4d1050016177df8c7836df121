package com.ign.corti;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 * This is the game class we will run 
 * the program from this class
 * 
 * @author corti
 *
 */
public class Game extends JFrame implements ActionListener {

	//Instance variables 
    public Player player = new Player("player");
    public Player dealer = new Player("dealer");

    private Deck fullDeck;
    
    //JFrame objs 
    private JButton btnHit = new JButton("Hit");
    private JButton btnStay = new JButton("Stay");
    private JButton btnDeal = new JButton("Deal");

    private JLabel lblStatus = new JLabel(" ", JLabel.CENTER);
    private JLabel lblScore = new JLabel("Player Score: ", JLabel.CENTER);
    
    //sections of the gui
    JPanel playerPanel = new JPanel();
    JPanel dealerPanel = new JPanel();
    JPanel buttonsPanel = new JPanel();
    JPanel statusPanel = new JPanel();
    /**
     * constructor for game where the JFrame objs get instantiated
     */
    public Game() {
    	//this will set the title, icon, and how to close the program 
        JFrame gameFrame = new JFrame("IGN Code FOO - BlackJack");
        gameFrame.setIconImage(Toolkit.getDefaultToolkit().getImage("cards/10.png"));
        gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //here we add all of the items to there respected pannel
        buttonsPanel.add(btnHit);
        buttonsPanel.add(btnStay);
        buttonsPanel.add(btnDeal);
        statusPanel.add(lblStatus);
        statusPanel.add(lblScore);

        //before the game can start we make hit and stay unavailable
        btnHit.setEnabled(false);
        btnStay.setEnabled(false);

        //this is were we create the action listener so that when we hit the specified button a thing will happen 
        btnHit.addActionListener(this);
        btnStay.addActionListener(this);
        btnDeal.addActionListener(this);
        
        // here we set the background color of the different panels 
        dealerPanel.setBackground(Color.CYAN);
        playerPanel.setBackground(Color.CYAN);
        buttonsPanel.setBackground(Color.LIGHT_GRAY);
        statusPanel.setBackground(Color.CYAN);

        //this is the place where we start putting the obj on the bored 
        gameFrame.setLayout(new BorderLayout());
        gameFrame.add(dealerPanel, BorderLayout.NORTH);
        gameFrame.add(playerPanel, BorderLayout.CENTER);
        gameFrame.add(buttonsPanel, BorderLayout.SOUTH);
        gameFrame.add(statusPanel, BorderLayout.WEST);
        gameFrame.repaint();
        
        //here we decide if it is resizeable, the size, and visibility of the frame 
        gameFrame.setResizable(false);
        gameFrame.setSize(500, 350);
        gameFrame.setVisible(true);
    }
    /**
     * this is where we start the game by dealing out 4 cards 
     */
    private void deal() {
    	//first we remove all obj and update the panels on the board to start fresh
        playerPanel.removeAll();
        dealerPanel.removeAll(); 
        playerPanel.updateUI();
        dealerPanel.updateUI();
        player.reset();
        dealer.reset();
        
        if (fullDeck == null || fullDeck.size() < 15) {
        	fullDeck = new Deck();
        	fullDeck.shuffle();
            lblStatus.setText("Shuffling");
        }
       //this deals 4 cards out two to the player and two to the computer  
        hitMe();
        hitDealerDown();
        hitMe();
        hitDealer();
    }
    
    /**
     * add one card to the player
     */
    private void hitMe() {
        Card newCard = player.dealTo(fullDeck.dealFrom());
        playerPanel.add(new JLabel(new ImageIcon("cards/" + newCard.toString())));
        playerPanel.updateUI();
    }

    private void hitDealer() {
        Card newCard = dealer.dealTo(fullDeck.dealFrom());
        dealerPanel.add(new JLabel(new ImageIcon("cards/" + newCard.toString())));
        dealerPanel.updateUI();
    }
    
    private void hitDealerDown() {
        Card newCard = dealer.dealTo(fullDeck.dealFrom());
        dealerPanel.add(new JLabel(new ImageIcon("cards/b2fv.png")));
        dealerPanel.updateUI();
    }

    private void checkWinner() {
        dealerPanel.removeAll();
        for (int i = 0; i < dealer.inHand(); i++) {
            dealerPanel.add(new JLabel(new ImageIcon("cards/" + dealer.cards[i].toString())));
        }
        if (player.value() > 21) {
            lblStatus.setText("Player Busts");
        } else if (dealer.value() > 21) {
            lblStatus.setText("Dealer Busts");
        } else if (dealer.value() == player.value()) {
            lblStatus.setText("Push");
        } else if (dealer.value() < player.value()) {
            lblStatus.setText("Player Wins");
        } else {
            lblStatus.setText("Dealer Wins");
        }
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnHit) {
            hitMe();
            if (player.value() > 21) {
                checkWinner();
                btnHit.setEnabled(false);
                btnStay.setEnabled(false);
                btnDeal.setEnabled(true);
            }
        }

        if (e.getSource() == btnStay) {
            while (dealer.value() < 17 || player.value() > dealer.value()) {
                hitDealer();
            }
            checkWinner();
            btnHit.setEnabled(false);
            btnStay.setEnabled(false);
            btnDeal.setEnabled(true);
        }

        if (e.getSource() == btnDeal) {
            deal();
            lblStatus.setText(" ");
            btnHit.setEnabled(true);
            btnStay.setEnabled(true);
            btnDeal.setEnabled(false);
        }
    }

    public static void main(String[] args) {
        new Game();
    }
}
